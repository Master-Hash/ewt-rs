name: Build

on:
  workflow_dispatch:
  pull_request:
  push:
    tags:
      - "v*.*.*"
    branches:
      - main

jobs:
  build:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              target: x86_64-pc-windows-gnu,
              os: windows-2025,
              bname: ewt.dll,
              feature: icu_segmenter,
            }
          - {
              target: x86_64-pc-windows-gnu,
              os: windows-2025,
              bname: ewt.dll,
              feature: windows,
            }
          - {
              target: x86_64-pc-windows-msvc,
              os: windows-2025,
              bname: ewt.dll,
              feature: icu_segmenter,
            }
          - {
              target: x86_64-pc-windows-msvc,
              os: windows-2025,
              bname: ewt.dll,
              feature: windows,
            }
          - {
              target: aarch64-pc-windows-msvc,
              os: windows-2025,
              bname: ewt.dll,
              feature: icu_segmenter,
            }
          - {
              target: aarch64-pc-windows-msvc,
              os: windows-2025,
              bname: ewt.dll,
              feature: windows,
            }
          - {
              target: x86_64-pc-windows-gnullvm,
              os: windows-2025,
              bname: ewt.dll,
              feature: icu_segmenter,
              msystem: clang64,
            }
          - {
              target: x86_64-pc-windows-gnullvm,
              os: windows-2025,
              bname: ewt.dll,
              feature: windows,
              msystem: clang64,
            }
          - {
              target: aarch64-pc-windows-gnullvm,
              os: windows-2025,
              bname: ewt.dll,
              feature: icu_segmenter,
              msystem: clangarm64,
            }
          - {
              target: aarch64-pc-windows-gnullvm,
              os: windows-2025,
              bname: ewt.dll,
              feature: windows,
              msystem: clangarm64,
            }
          - {
              target: x86_64-unknown-linux-gnu,
              os: ubuntu-24.04,
              bname: libewt.so,
              feature: icu_segmenter,
            }
          - {
              target: aarch64-unknown-linux-gnu,
              os: ubuntu-24.04-arm,
              bname: libewt.so,
              feature: icu_segmenter,
            }
          - {
              target: x86_64-linux-android,
              os: ubuntu-24.04,
              bname: libewt.so,
              feature: icu_segmenter,
            }
          - {
              target: aarch64-linux-android,
              os: ubuntu-24.04,
              bname: libewt.so,
              feature: icu_segmenter,
            }
          - {
              target: x86_64-apple-darwin,
              os: macos-15,
              bname: libewt.dylib,
              feature: icu_segmenter,
            }
          - {
              target: aarch64-apple-darwin,
              os: macos-15,
              bname: libewt.dylib,
              feature: icu_segmenter,
            }

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.job.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.job.feature }}

      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-ndk
        if: ${{ endsWith(matrix.job.target, 'android') }}

      - name: Show version information (Rust, cargo)
        run: |
          rustup -V
          rustup toolchain list
          rustup target add ${{ matrix.job.target }}
          cargo -V
          rustc -V

      - uses: msys2/setup-msys2@v2
        id: msys2
        # Run only when having msystem variable
        if: ${{ matrix.job.msystem != '' }}
        with:
          release: false
          update: true
          msystem: ${{ matrix.job.msystem }}
          pacboy: clang:p clang:c

      - run: |
          echo "LIBCLANG_PATH=${{ steps.msys2.outputs.msys2-location }}\clang64\bin\libclang.dll" >> "$GITHUB_ENV"
          echo "${{ steps.msys2.outputs.msys2-location }}\clang64\bin" >> "$GITHUB_PATH"
        if: ${{ matrix.job.msystem != '' }}

      # - run: |
      #     echo "ANDROID_NDK_LATEST_HOME = ${ANDROID_NDK_LATEST_HOME}"
      #     ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-config --libdir
      #     echo "LIBCLANG_PATH=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/lib" >> "$GITHUB_ENV"
      #     echo "LD_LIBRARY_PATH=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/lib" >> "$GITHUB_ENV"
      #   if: ${{ endsWith(matrix.job.target, 'android') }}

      - run: |
          mkdir ${{ steps.msys2.outputs.msys2-location }}\clang64\lib\clang\20\lib\aarch64-w64-windows-gnu
          cp ${{ steps.msys2.outputs.msys2-location }}\clangarm64\lib\clang\20\lib\windows\libclang_rt.builtins-aarch64.a ${{ steps.msys2.outputs.msys2-location }}\clang64\lib\clang\20\lib\aarch64-w64-windows-gnu\libclang_rt.builtins.a
        if: ${{ matrix.job.msystem == 'clangarm64' }}

      - name: Build
        env:
          BINDGEN_EXTRA_CLANG_ARGS_X86_64_PC_WINDOWS_GNULLVM: -I"${{ steps.msys2.outputs.msys2-location }}\clang64\include" -I"${{ steps.msys2.outputs.msys2-location }}\clang64\lib\clang\20\include" --target=x86_64-w64-windows-gnu --sysroot=${{ steps.msys2.outputs.msys2-location }}\clang64
          CARGO_TARGET_X86_64_PC_WINDOWS_GNULLVM_LINKER: ${{ steps.msys2.outputs.msys2-location }}\clang64\bin\clang.exe
          CARGO_TARGET_X86_64_PC_WINDOWS_GNULLVM_RUSTFLAGS: -C link-arg=-fuse-ld=lld
          BINDGEN_EXTRA_CLANG_ARGS_AARCH64_PC_WINDOWS_GNULLVM: -I"${{ steps.msys2.outputs.msys2-location }}\clangarm64\include" -I"${{ steps.msys2.outputs.msys2-location }}\clangarm64\lib\clang\20\include" --target=aarch64-w64-windows-gnu --sysroot=${{ steps.msys2.outputs.msys2-location }}\clangarm64
          CARGO_TARGET_AARCH64_PC_WINDOWS_GNULLVM_LINKER: ${{ steps.msys2.outputs.msys2-location }}\clang64\bin\clang.exe
          CARGO_TARGET_AARCH64_PC_WINDOWS_GNULLVM_RUSTFLAGS: -C link-arg=-fuse-ld=lld -C link-arg=--target=aarch64-w64-windows-gnu -C link-arg=--sysroot=${{ steps.msys2.outputs.msys2-location }}\clangarm64
          # BINDGEN_EXTRA_CLANG_ARGS_X86_64_LINUX_ANDROID: -I"${{ env.ANDROID_NDK_LATEST_HOME }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include" --target=x86_64-linux-android22 --sysroot=${{ env.ANDROID_NDK_LATEST_HOME }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot
          # CARGO_TARGET_X86_64_LINUX_ANDROID_AR: ${{ env.ANDROID_NDK_LATEST_HOME }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar
          # CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER: ${{ env.ANDROID_NDK_LATEST_HOME }}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang
          # BINDGEN_EXTRA_CLANG_ARGS_AARCH64_LINUX_ANDROID: -I"${{ env.ANDROID_NDK_LATEST_HOME }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include" --target=aarch64-linux-android22 --sysroot=${{ env.ANDROID_NDK_LATEST_HOME }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot
          # CARGO_TARGET_AARCH64_LINUX_ANDROID_AR: ${{ env.ANDROID_NDK_LATEST_HOME }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar
          # CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER: ${{ env.ANDROID_NDK_LATEST_HOME }}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang
        run: cargo build --locked --release --target=${{ matrix.job.target }} --no-default-features -F ${{ matrix.job.feature }}
        if: ${{ !endsWith(matrix.job.target, 'android') }}

      - name: Build Android
        run: |
          cargo ndk -P 22 -t ${{ matrix.job.target }} build --release -vv
        if: ${{ endsWith(matrix.job.target, 'android') }}

      - name: "Artifact upload"
        uses: actions/upload-artifact@master
        with:
          name: libewt-${{ matrix.job.feature }}-${{ matrix.job.target }}
          path: |
            target/${{ matrix.job.target }}/release/${{ matrix.job.bname }}

  release:
    name: Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: download

      - name: Create zip files
        run: |
          for f in download/*; do
            7z a -tzip -mx=9 -r ${f}.zip ${f}/*
          done

      - name: Upload release
        run: |
          gh release create "${GITHUB_REF##*/}" download/*.zip -t "${GITHUB_REF##*/}" --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
